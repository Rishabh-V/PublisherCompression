/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Google.Cloud.PubSub.Compression.Thrift
{

  public partial class Education : TBase
  {
    private global::Google.Cloud.PubSub.Compression.Thrift.Institute _institute;
    private string _startDate;
    private string _endDate;
    private string _major;
    private string _degree;
    private double _gpa;

    public global::Google.Cloud.PubSub.Compression.Thrift.Institute Institute
    {
      get
      {
        return _institute;
      }
      set
      {
        __isset.institute = true;
        this._institute = value;
      }
    }

    public string StartDate
    {
      get
      {
        return _startDate;
      }
      set
      {
        __isset.startDate = true;
        this._startDate = value;
      }
    }

    public string EndDate
    {
      get
      {
        return _endDate;
      }
      set
      {
        __isset.endDate = true;
        this._endDate = value;
      }
    }

    public string Major
    {
      get
      {
        return _major;
      }
      set
      {
        __isset.major = true;
        this._major = value;
      }
    }

    public string Degree
    {
      get
      {
        return _degree;
      }
      set
      {
        __isset.degree = true;
        this._degree = value;
      }
    }

    public double Gpa
    {
      get
      {
        return _gpa;
      }
      set
      {
        __isset.gpa = true;
        this._gpa = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool institute;
      public bool startDate;
      public bool endDate;
      public bool major;
      public bool degree;
      public bool gpa;
    }

    public Education()
    {
    }

    public Education DeepCopy()
    {
      var tmp33 = new Education();
      if((Institute != null) && __isset.institute)
      {
        tmp33.Institute = (global::Google.Cloud.PubSub.Compression.Thrift.Institute)this.Institute.DeepCopy();
      }
      tmp33.__isset.institute = this.__isset.institute;
      if((StartDate != null) && __isset.startDate)
      {
        tmp33.StartDate = this.StartDate;
      }
      tmp33.__isset.startDate = this.__isset.startDate;
      if((EndDate != null) && __isset.endDate)
      {
        tmp33.EndDate = this.EndDate;
      }
      tmp33.__isset.endDate = this.__isset.endDate;
      if((Major != null) && __isset.major)
      {
        tmp33.Major = this.Major;
      }
      tmp33.__isset.major = this.__isset.major;
      if((Degree != null) && __isset.degree)
      {
        tmp33.Degree = this.Degree;
      }
      tmp33.__isset.degree = this.__isset.degree;
      if(__isset.gpa)
      {
        tmp33.Gpa = this.Gpa;
      }
      tmp33.__isset.gpa = this.__isset.gpa;
      return tmp33;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Institute = new global::Google.Cloud.PubSub.Compression.Thrift.Institute();
                await Institute.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                StartDate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                EndDate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Major = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Degree = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Double)
              {
                Gpa = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp34 = new TStruct("Education");
        await oprot.WriteStructBeginAsync(tmp34, cancellationToken);
        var tmp35 = new TField();
        if((Institute != null) && __isset.institute)
        {
          tmp35.Name = "institute";
          tmp35.Type = TType.Struct;
          tmp35.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await Institute.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((StartDate != null) && __isset.startDate)
        {
          tmp35.Name = "startDate";
          tmp35.Type = TType.String;
          tmp35.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteStringAsync(StartDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((EndDate != null) && __isset.endDate)
        {
          tmp35.Name = "endDate";
          tmp35.Type = TType.String;
          tmp35.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteStringAsync(EndDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Major != null) && __isset.major)
        {
          tmp35.Name = "major";
          tmp35.Type = TType.String;
          tmp35.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteStringAsync(Major, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Degree != null) && __isset.degree)
        {
          tmp35.Name = "degree";
          tmp35.Type = TType.String;
          tmp35.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteStringAsync(Degree, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.gpa)
        {
          tmp35.Name = "gpa";
          tmp35.Type = TType.Double;
          tmp35.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp35, cancellationToken);
          await oprot.WriteDoubleAsync(Gpa, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Education other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.institute == other.__isset.institute) && ((!__isset.institute) || (global::System.Object.Equals(Institute, other.Institute))))
        && ((__isset.startDate == other.__isset.startDate) && ((!__isset.startDate) || (global::System.Object.Equals(StartDate, other.StartDate))))
        && ((__isset.endDate == other.__isset.endDate) && ((!__isset.endDate) || (global::System.Object.Equals(EndDate, other.EndDate))))
        && ((__isset.major == other.__isset.major) && ((!__isset.major) || (global::System.Object.Equals(Major, other.Major))))
        && ((__isset.degree == other.__isset.degree) && ((!__isset.degree) || (global::System.Object.Equals(Degree, other.Degree))))
        && ((__isset.gpa == other.__isset.gpa) && ((!__isset.gpa) || (global::System.Object.Equals(Gpa, other.Gpa))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Institute != null) && __isset.institute)
        {
          hashcode = (hashcode * 397) + Institute.GetHashCode();
        }
        if((StartDate != null) && __isset.startDate)
        {
          hashcode = (hashcode * 397) + StartDate.GetHashCode();
        }
        if((EndDate != null) && __isset.endDate)
        {
          hashcode = (hashcode * 397) + EndDate.GetHashCode();
        }
        if((Major != null) && __isset.major)
        {
          hashcode = (hashcode * 397) + Major.GetHashCode();
        }
        if((Degree != null) && __isset.degree)
        {
          hashcode = (hashcode * 397) + Degree.GetHashCode();
        }
        if(__isset.gpa)
        {
          hashcode = (hashcode * 397) + Gpa.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp36 = new StringBuilder("Education(");
      int tmp37 = 0;
      if((Institute != null) && __isset.institute)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("Institute: ");
        Institute.ToString(tmp36);
      }
      if((StartDate != null) && __isset.startDate)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("StartDate: ");
        StartDate.ToString(tmp36);
      }
      if((EndDate != null) && __isset.endDate)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("EndDate: ");
        EndDate.ToString(tmp36);
      }
      if((Major != null) && __isset.major)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("Major: ");
        Major.ToString(tmp36);
      }
      if((Degree != null) && __isset.degree)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("Degree: ");
        Degree.ToString(tmp36);
      }
      if(__isset.gpa)
      {
        if(0 < tmp37++) { tmp36.Append(", "); }
        tmp36.Append("Gpa: ");
        Gpa.ToString(tmp36);
      }
      tmp36.Append(')');
      return tmp36.ToString();
    }
  }

}
