/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Google.Cloud.PubSub.Compression.Thrift
{

  public partial class Institute : TBase
  {
    private string _name;
    private global::Google.Cloud.PubSub.Compression.Thrift.Address _address;
    private string _establishDate;
    private int _studentCount;
    private string _director;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public global::Google.Cloud.PubSub.Compression.Thrift.Address Address
    {
      get
      {
        return _address;
      }
      set
      {
        __isset.address = true;
        this._address = value;
      }
    }

    public string EstablishDate
    {
      get
      {
        return _establishDate;
      }
      set
      {
        __isset.establishDate = true;
        this._establishDate = value;
      }
    }

    public int StudentCount
    {
      get
      {
        return _studentCount;
      }
      set
      {
        __isset.studentCount = true;
        this._studentCount = value;
      }
    }

    public string Director
    {
      get
      {
        return _director;
      }
      set
      {
        __isset.director = true;
        this._director = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool name;
      public bool address;
      public bool establishDate;
      public bool studentCount;
      public bool director;
    }

    public Institute()
    {
    }

    public Institute DeepCopy()
    {
      var tmp28 = new Institute();
      if((Name != null) && __isset.name)
      {
        tmp28.Name = this.Name;
      }
      tmp28.__isset.name = this.__isset.name;
      if((Address != null) && __isset.address)
      {
        tmp28.Address = (global::Google.Cloud.PubSub.Compression.Thrift.Address)this.Address.DeepCopy();
      }
      tmp28.__isset.address = this.__isset.address;
      if((EstablishDate != null) && __isset.establishDate)
      {
        tmp28.EstablishDate = this.EstablishDate;
      }
      tmp28.__isset.establishDate = this.__isset.establishDate;
      if(__isset.studentCount)
      {
        tmp28.StudentCount = this.StudentCount;
      }
      tmp28.__isset.studentCount = this.__isset.studentCount;
      if((Director != null) && __isset.director)
      {
        tmp28.Director = this.Director;
      }
      tmp28.__isset.director = this.__isset.director;
      return tmp28;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Address = new global::Google.Cloud.PubSub.Compression.Thrift.Address();
                await Address.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                EstablishDate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                StudentCount = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Director = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp29 = new TStruct("Institute");
        await oprot.WriteStructBeginAsync(tmp29, cancellationToken);
        var tmp30 = new TField();
        if((Name != null) && __isset.name)
        {
          tmp30.Name = "name";
          tmp30.Type = TType.String;
          tmp30.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Address != null) && __isset.address)
        {
          tmp30.Name = "address";
          tmp30.Type = TType.Struct;
          tmp30.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await Address.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((EstablishDate != null) && __isset.establishDate)
        {
          tmp30.Name = "establishDate";
          tmp30.Type = TType.String;
          tmp30.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await oprot.WriteStringAsync(EstablishDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.studentCount)
        {
          tmp30.Name = "studentCount";
          tmp30.Type = TType.I32;
          tmp30.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await oprot.WriteI32Async(StudentCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Director != null) && __isset.director)
        {
          tmp30.Name = "director";
          tmp30.Type = TType.String;
          tmp30.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp30, cancellationToken);
          await oprot.WriteStringAsync(Director, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Institute other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.name == other.__isset.name) && ((!__isset.name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))))
        && ((__isset.establishDate == other.__isset.establishDate) && ((!__isset.establishDate) || (global::System.Object.Equals(EstablishDate, other.EstablishDate))))
        && ((__isset.studentCount == other.__isset.studentCount) && ((!__isset.studentCount) || (global::System.Object.Equals(StudentCount, other.StudentCount))))
        && ((__isset.director == other.__isset.director) && ((!__isset.director) || (global::System.Object.Equals(Director, other.Director))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Name != null) && __isset.name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Address != null) && __isset.address)
        {
          hashcode = (hashcode * 397) + Address.GetHashCode();
        }
        if((EstablishDate != null) && __isset.establishDate)
        {
          hashcode = (hashcode * 397) + EstablishDate.GetHashCode();
        }
        if(__isset.studentCount)
        {
          hashcode = (hashcode * 397) + StudentCount.GetHashCode();
        }
        if((Director != null) && __isset.director)
        {
          hashcode = (hashcode * 397) + Director.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp31 = new StringBuilder("Institute(");
      int tmp32 = 0;
      if((Name != null) && __isset.name)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("Name: ");
        Name.ToString(tmp31);
      }
      if((Address != null) && __isset.address)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("Address: ");
        Address.ToString(tmp31);
      }
      if((EstablishDate != null) && __isset.establishDate)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("EstablishDate: ");
        EstablishDate.ToString(tmp31);
      }
      if(__isset.studentCount)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("StudentCount: ");
        StudentCount.ToString(tmp31);
      }
      if((Director != null) && __isset.director)
      {
        if(0 < tmp32++) { tmp31.Append(", "); }
        tmp31.Append("Director: ");
        Director.ToString(tmp31);
      }
      tmp31.Append(')');
      return tmp31.ToString();
    }
  }

}
