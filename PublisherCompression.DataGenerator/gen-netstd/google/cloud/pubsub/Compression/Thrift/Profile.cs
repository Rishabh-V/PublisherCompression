/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Google.Cloud.PubSub.Compression.Thrift
{

  public partial class Profile : TBase
  {
    private int _userId;
    private global::Google.Cloud.PubSub.Compression.Thrift.Person _person;
    private string _bio;
    private global::Google.Cloud.PubSub.Compression.Thrift.Address _hometown;
    private string _hobby;
    private string _dob;
    private string _occupation;
    private List<global::Google.Cloud.PubSub.Compression.Thrift.Job> _jobs;
    private List<global::Google.Cloud.PubSub.Compression.Thrift.Education> _educations;

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public global::Google.Cloud.PubSub.Compression.Thrift.Person Person
    {
      get
      {
        return _person;
      }
      set
      {
        __isset.person = true;
        this._person = value;
      }
    }

    public string Bio
    {
      get
      {
        return _bio;
      }
      set
      {
        __isset.bio = true;
        this._bio = value;
      }
    }

    public global::Google.Cloud.PubSub.Compression.Thrift.Address Hometown
    {
      get
      {
        return _hometown;
      }
      set
      {
        __isset.hometown = true;
        this._hometown = value;
      }
    }

    public string Hobby
    {
      get
      {
        return _hobby;
      }
      set
      {
        __isset.hobby = true;
        this._hobby = value;
      }
    }

    public string Dob
    {
      get
      {
        return _dob;
      }
      set
      {
        __isset.dob = true;
        this._dob = value;
      }
    }

    public string Occupation
    {
      get
      {
        return _occupation;
      }
      set
      {
        __isset.occupation = true;
        this._occupation = value;
      }
    }

    public List<global::Google.Cloud.PubSub.Compression.Thrift.Job> Jobs
    {
      get
      {
        return _jobs;
      }
      set
      {
        __isset.jobs = true;
        this._jobs = value;
      }
    }

    public List<global::Google.Cloud.PubSub.Compression.Thrift.Education> Educations
    {
      get
      {
        return _educations;
      }
      set
      {
        __isset.educations = true;
        this._educations = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool userId;
      public bool person;
      public bool bio;
      public bool hometown;
      public bool hobby;
      public bool dob;
      public bool occupation;
      public bool jobs;
      public bool educations;
    }

    public Profile()
    {
    }

    public Profile DeepCopy()
    {
      var tmp38 = new Profile();
      if(__isset.userId)
      {
        tmp38.UserId = this.UserId;
      }
      tmp38.__isset.userId = this.__isset.userId;
      if((Person != null) && __isset.person)
      {
        tmp38.Person = (global::Google.Cloud.PubSub.Compression.Thrift.Person)this.Person.DeepCopy();
      }
      tmp38.__isset.person = this.__isset.person;
      if((Bio != null) && __isset.bio)
      {
        tmp38.Bio = this.Bio;
      }
      tmp38.__isset.bio = this.__isset.bio;
      if((Hometown != null) && __isset.hometown)
      {
        tmp38.Hometown = (global::Google.Cloud.PubSub.Compression.Thrift.Address)this.Hometown.DeepCopy();
      }
      tmp38.__isset.hometown = this.__isset.hometown;
      if((Hobby != null) && __isset.hobby)
      {
        tmp38.Hobby = this.Hobby;
      }
      tmp38.__isset.hobby = this.__isset.hobby;
      if((Dob != null) && __isset.dob)
      {
        tmp38.Dob = this.Dob;
      }
      tmp38.__isset.dob = this.__isset.dob;
      if((Occupation != null) && __isset.occupation)
      {
        tmp38.Occupation = this.Occupation;
      }
      tmp38.__isset.occupation = this.__isset.occupation;
      if((Jobs != null) && __isset.jobs)
      {
        tmp38.Jobs = this.Jobs.DeepCopy();
      }
      tmp38.__isset.jobs = this.__isset.jobs;
      if((Educations != null) && __isset.educations)
      {
        tmp38.Educations = this.Educations.DeepCopy();
      }
      tmp38.__isset.educations = this.__isset.educations;
      return tmp38;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                UserId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Person = new global::Google.Cloud.PubSub.Compression.Thrift.Person();
                await Person.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Bio = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Hometown = new global::Google.Cloud.PubSub.Compression.Thrift.Address();
                await Hometown.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Hobby = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                Dob = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                Occupation = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.List)
              {
                {
                  var _list39 = await iprot.ReadListBeginAsync(cancellationToken);
                  Jobs = new List<global::Google.Cloud.PubSub.Compression.Thrift.Job>(_list39.Count);
                  for(int _i40 = 0; _i40 < _list39.Count; ++_i40)
                  {
                    global::Google.Cloud.PubSub.Compression.Thrift.Job _elem41;
                    _elem41 = new global::Google.Cloud.PubSub.Compression.Thrift.Job();
                    await _elem41.ReadAsync(iprot, cancellationToken);
                    Jobs.Add(_elem41);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 9:
              if (field.Type == TType.List)
              {
                {
                  var _list42 = await iprot.ReadListBeginAsync(cancellationToken);
                  Educations = new List<global::Google.Cloud.PubSub.Compression.Thrift.Education>(_list42.Count);
                  for(int _i43 = 0; _i43 < _list42.Count; ++_i43)
                  {
                    global::Google.Cloud.PubSub.Compression.Thrift.Education _elem44;
                    _elem44 = new global::Google.Cloud.PubSub.Compression.Thrift.Education();
                    await _elem44.ReadAsync(iprot, cancellationToken);
                    Educations.Add(_elem44);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp45 = new TStruct("Profile");
        await oprot.WriteStructBeginAsync(tmp45, cancellationToken);
        var tmp46 = new TField();
        if(__isset.userId)
        {
          tmp46.Name = "userId";
          tmp46.Type = TType.I32;
          tmp46.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteI32Async(UserId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Person != null) && __isset.person)
        {
          tmp46.Name = "person";
          tmp46.Type = TType.Struct;
          tmp46.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await Person.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Bio != null) && __isset.bio)
        {
          tmp46.Name = "bio";
          tmp46.Type = TType.String;
          tmp46.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteStringAsync(Bio, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Hometown != null) && __isset.hometown)
        {
          tmp46.Name = "hometown";
          tmp46.Type = TType.Struct;
          tmp46.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await Hometown.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Hobby != null) && __isset.hobby)
        {
          tmp46.Name = "hobby";
          tmp46.Type = TType.String;
          tmp46.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteStringAsync(Hobby, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Dob != null) && __isset.dob)
        {
          tmp46.Name = "dob";
          tmp46.Type = TType.String;
          tmp46.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteStringAsync(Dob, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Occupation != null) && __isset.occupation)
        {
          tmp46.Name = "occupation";
          tmp46.Type = TType.String;
          tmp46.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteStringAsync(Occupation, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Jobs != null) && __isset.jobs)
        {
          tmp46.Name = "jobs";
          tmp46.Type = TType.List;
          tmp46.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Jobs.Count), cancellationToken);
          foreach (global::Google.Cloud.PubSub.Compression.Thrift.Job _iter47 in Jobs)
          {
            await _iter47.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Educations != null) && __isset.educations)
        {
          tmp46.Name = "educations";
          tmp46.Type = TType.List;
          tmp46.ID = 9;
          await oprot.WriteFieldBeginAsync(tmp46, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Educations.Count), cancellationToken);
          foreach (global::Google.Cloud.PubSub.Compression.Thrift.Education _iter48 in Educations)
          {
            await _iter48.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Profile other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.userId == other.__isset.userId) && ((!__isset.userId) || (global::System.Object.Equals(UserId, other.UserId))))
        && ((__isset.person == other.__isset.person) && ((!__isset.person) || (global::System.Object.Equals(Person, other.Person))))
        && ((__isset.bio == other.__isset.bio) && ((!__isset.bio) || (global::System.Object.Equals(Bio, other.Bio))))
        && ((__isset.hometown == other.__isset.hometown) && ((!__isset.hometown) || (global::System.Object.Equals(Hometown, other.Hometown))))
        && ((__isset.hobby == other.__isset.hobby) && ((!__isset.hobby) || (global::System.Object.Equals(Hobby, other.Hobby))))
        && ((__isset.dob == other.__isset.dob) && ((!__isset.dob) || (global::System.Object.Equals(Dob, other.Dob))))
        && ((__isset.occupation == other.__isset.occupation) && ((!__isset.occupation) || (global::System.Object.Equals(Occupation, other.Occupation))))
        && ((__isset.jobs == other.__isset.jobs) && ((!__isset.jobs) || (TCollections.Equals(Jobs, other.Jobs))))
        && ((__isset.educations == other.__isset.educations) && ((!__isset.educations) || (TCollections.Equals(Educations, other.Educations))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.userId)
        {
          hashcode = (hashcode * 397) + UserId.GetHashCode();
        }
        if((Person != null) && __isset.person)
        {
          hashcode = (hashcode * 397) + Person.GetHashCode();
        }
        if((Bio != null) && __isset.bio)
        {
          hashcode = (hashcode * 397) + Bio.GetHashCode();
        }
        if((Hometown != null) && __isset.hometown)
        {
          hashcode = (hashcode * 397) + Hometown.GetHashCode();
        }
        if((Hobby != null) && __isset.hobby)
        {
          hashcode = (hashcode * 397) + Hobby.GetHashCode();
        }
        if((Dob != null) && __isset.dob)
        {
          hashcode = (hashcode * 397) + Dob.GetHashCode();
        }
        if((Occupation != null) && __isset.occupation)
        {
          hashcode = (hashcode * 397) + Occupation.GetHashCode();
        }
        if((Jobs != null) && __isset.jobs)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Jobs);
        }
        if((Educations != null) && __isset.educations)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Educations);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp49 = new StringBuilder("Profile(");
      int tmp50 = 0;
      if(__isset.userId)
      {
        if(0 < tmp50++) { tmp49.Append(", "); }
        tmp49.Append("UserId: ");
        UserId.ToString(tmp49);
      }
      if((Person != null) && __isset.person)
      {
        if(0 < tmp50++) { tmp49.Append(", "); }
        tmp49.Append("Person: ");
        Person.ToString(tmp49);
      }
      if((Bio != null) && __isset.bio)
      {
        if(0 < tmp50++) { tmp49.Append(", "); }
        tmp49.Append("Bio: ");
        Bio.ToString(tmp49);
      }
      if((Hometown != null) && __isset.hometown)
      {
        if(0 < tmp50++) { tmp49.Append(", "); }
        tmp49.Append("Hometown: ");
        Hometown.ToString(tmp49);
      }
      if((Hobby != null) && __isset.hobby)
      {
        if(0 < tmp50++) { tmp49.Append(", "); }
        tmp49.Append("Hobby: ");
        Hobby.ToString(tmp49);
      }
      if((Dob != null) && __isset.dob)
      {
        if(0 < tmp50++) { tmp49.Append(", "); }
        tmp49.Append("Dob: ");
        Dob.ToString(tmp49);
      }
      if((Occupation != null) && __isset.occupation)
      {
        if(0 < tmp50++) { tmp49.Append(", "); }
        tmp49.Append("Occupation: ");
        Occupation.ToString(tmp49);
      }
      if((Jobs != null) && __isset.jobs)
      {
        if(0 < tmp50++) { tmp49.Append(", "); }
        tmp49.Append("Jobs: ");
        Jobs.ToString(tmp49);
      }
      if((Educations != null) && __isset.educations)
      {
        if(0 < tmp50++) { tmp49.Append(", "); }
        tmp49.Append("Educations: ");
        Educations.ToString(tmp49);
      }
      tmp49.Append(')');
      return tmp49.ToString();
    }
  }

}
