/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Google.Cloud.PubSub.Compression.Thrift
{

  public partial class Job : TBase
  {
    private global::Google.Cloud.PubSub.Compression.Thrift.Company _company;
    private string _designation;
    private string _startDate;
    private string _endDate;
    private global::Google.Cloud.PubSub.Compression.Thrift.Address _address;

    public global::Google.Cloud.PubSub.Compression.Thrift.Company Company
    {
      get
      {
        return _company;
      }
      set
      {
        __isset.company = true;
        this._company = value;
      }
    }

    public string Designation
    {
      get
      {
        return _designation;
      }
      set
      {
        __isset.designation = true;
        this._designation = value;
      }
    }

    public string StartDate
    {
      get
      {
        return _startDate;
      }
      set
      {
        __isset.startDate = true;
        this._startDate = value;
      }
    }

    public string EndDate
    {
      get
      {
        return _endDate;
      }
      set
      {
        __isset.endDate = true;
        this._endDate = value;
      }
    }

    public global::Google.Cloud.PubSub.Compression.Thrift.Address Address
    {
      get
      {
        return _address;
      }
      set
      {
        __isset.address = true;
        this._address = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool company;
      public bool designation;
      public bool startDate;
      public bool endDate;
      public bool address;
    }

    public Job()
    {
    }

    public Job DeepCopy()
    {
      var tmp23 = new Job();
      if((Company != null) && __isset.company)
      {
        tmp23.Company = (global::Google.Cloud.PubSub.Compression.Thrift.Company)this.Company.DeepCopy();
      }
      tmp23.__isset.company = this.__isset.company;
      if((Designation != null) && __isset.designation)
      {
        tmp23.Designation = this.Designation;
      }
      tmp23.__isset.designation = this.__isset.designation;
      if((StartDate != null) && __isset.startDate)
      {
        tmp23.StartDate = this.StartDate;
      }
      tmp23.__isset.startDate = this.__isset.startDate;
      if((EndDate != null) && __isset.endDate)
      {
        tmp23.EndDate = this.EndDate;
      }
      tmp23.__isset.endDate = this.__isset.endDate;
      if((Address != null) && __isset.address)
      {
        tmp23.Address = (global::Google.Cloud.PubSub.Compression.Thrift.Address)this.Address.DeepCopy();
      }
      tmp23.__isset.address = this.__isset.address;
      return tmp23;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Company = new global::Google.Cloud.PubSub.Compression.Thrift.Company();
                await Company.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Designation = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                StartDate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                EndDate = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Address = new global::Google.Cloud.PubSub.Compression.Thrift.Address();
                await Address.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp24 = new TStruct("Job");
        await oprot.WriteStructBeginAsync(tmp24, cancellationToken);
        var tmp25 = new TField();
        if((Company != null) && __isset.company)
        {
          tmp25.Name = "company";
          tmp25.Type = TType.Struct;
          tmp25.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await Company.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Designation != null) && __isset.designation)
        {
          tmp25.Name = "designation";
          tmp25.Type = TType.String;
          tmp25.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(Designation, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((StartDate != null) && __isset.startDate)
        {
          tmp25.Name = "startDate";
          tmp25.Type = TType.String;
          tmp25.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(StartDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((EndDate != null) && __isset.endDate)
        {
          tmp25.Name = "endDate";
          tmp25.Type = TType.String;
          tmp25.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await oprot.WriteStringAsync(EndDate, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Address != null) && __isset.address)
        {
          tmp25.Name = "address";
          tmp25.Type = TType.Struct;
          tmp25.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
          await Address.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Job other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.company == other.__isset.company) && ((!__isset.company) || (global::System.Object.Equals(Company, other.Company))))
        && ((__isset.designation == other.__isset.designation) && ((!__isset.designation) || (global::System.Object.Equals(Designation, other.Designation))))
        && ((__isset.startDate == other.__isset.startDate) && ((!__isset.startDate) || (global::System.Object.Equals(StartDate, other.StartDate))))
        && ((__isset.endDate == other.__isset.endDate) && ((!__isset.endDate) || (global::System.Object.Equals(EndDate, other.EndDate))))
        && ((__isset.address == other.__isset.address) && ((!__isset.address) || (global::System.Object.Equals(Address, other.Address))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Company != null) && __isset.company)
        {
          hashcode = (hashcode * 397) + Company.GetHashCode();
        }
        if((Designation != null) && __isset.designation)
        {
          hashcode = (hashcode * 397) + Designation.GetHashCode();
        }
        if((StartDate != null) && __isset.startDate)
        {
          hashcode = (hashcode * 397) + StartDate.GetHashCode();
        }
        if((EndDate != null) && __isset.endDate)
        {
          hashcode = (hashcode * 397) + EndDate.GetHashCode();
        }
        if((Address != null) && __isset.address)
        {
          hashcode = (hashcode * 397) + Address.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp26 = new StringBuilder("Job(");
      int tmp27 = 0;
      if((Company != null) && __isset.company)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("Company: ");
        Company.ToString(tmp26);
      }
      if((Designation != null) && __isset.designation)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("Designation: ");
        Designation.ToString(tmp26);
      }
      if((StartDate != null) && __isset.startDate)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("StartDate: ");
        StartDate.ToString(tmp26);
      }
      if((EndDate != null) && __isset.endDate)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("EndDate: ");
        EndDate.ToString(tmp26);
      }
      if((Address != null) && __isset.address)
      {
        if(0 < tmp27++) { tmp26.Append(", "); }
        tmp26.Append("Address: ");
        Address.ToString(tmp26);
      }
      tmp26.Append(')');
      return tmp26.ToString();
    }
  }

}
