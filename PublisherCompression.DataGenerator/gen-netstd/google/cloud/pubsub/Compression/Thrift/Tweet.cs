/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Google.Cloud.PubSub.Compression.Thrift
{

  public partial class Tweet : TBase
  {
    private global::Google.Cloud.PubSub.Compression.Thrift.Profile _profile;
    private string _text;
    private global::Google.Cloud.PubSub.Compression.Thrift.Location _loc;
    private global::Google.Cloud.PubSub.Compression.Thrift.TweetType _tweetType;
    private string _language;

    public global::Google.Cloud.PubSub.Compression.Thrift.Profile Profile
    {
      get
      {
        return _profile;
      }
      set
      {
        __isset.profile = true;
        this._profile = value;
      }
    }

    public string Text
    {
      get
      {
        return _text;
      }
      set
      {
        __isset.text = true;
        this._text = value;
      }
    }

    public global::Google.Cloud.PubSub.Compression.Thrift.Location Loc
    {
      get
      {
        return _loc;
      }
      set
      {
        __isset.loc = true;
        this._loc = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="global::Google.Cloud.PubSub.Compression.Thrift.TweetType"/>
    /// </summary>
    public global::Google.Cloud.PubSub.Compression.Thrift.TweetType TweetType
    {
      get
      {
        return _tweetType;
      }
      set
      {
        __isset.tweetType = true;
        this._tweetType = value;
      }
    }

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool profile;
      public bool text;
      public bool loc;
      public bool tweetType;
      public bool language;
    }

    public Tweet()
    {
      this._tweetType = global::Google.Cloud.PubSub.Compression.Thrift.TweetType.TWEET;
      this.__isset.tweetType = true;
      this._language = "english";
      this.__isset.language = true;
    }

    public Tweet DeepCopy()
    {
      var tmp51 = new Tweet();
      if((Profile != null) && __isset.profile)
      {
        tmp51.Profile = (global::Google.Cloud.PubSub.Compression.Thrift.Profile)this.Profile.DeepCopy();
      }
      tmp51.__isset.profile = this.__isset.profile;
      if((Text != null) && __isset.text)
      {
        tmp51.Text = this.Text;
      }
      tmp51.__isset.text = this.__isset.text;
      if((Loc != null) && __isset.loc)
      {
        tmp51.Loc = (global::Google.Cloud.PubSub.Compression.Thrift.Location)this.Loc.DeepCopy();
      }
      tmp51.__isset.loc = this.__isset.loc;
      if(__isset.tweetType)
      {
        tmp51.TweetType = this.TweetType;
      }
      tmp51.__isset.tweetType = this.__isset.tweetType;
      if((Language != null) && __isset.language)
      {
        tmp51.Language = this.Language;
      }
      tmp51.__isset.language = this.__isset.language;
      return tmp51;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Profile = new global::Google.Cloud.PubSub.Compression.Thrift.Profile();
                await Profile.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Text = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                Loc = new global::Google.Cloud.PubSub.Compression.Thrift.Location();
                await Loc.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                TweetType = (global::Google.Cloud.PubSub.Compression.Thrift.TweetType)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Language = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp52 = new TStruct("Tweet");
        await oprot.WriteStructBeginAsync(tmp52, cancellationToken);
        var tmp53 = new TField();
        if((Profile != null) && __isset.profile)
        {
          tmp53.Name = "profile";
          tmp53.Type = TType.Struct;
          tmp53.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
          await Profile.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Text != null) && __isset.text)
        {
          tmp53.Name = "text";
          tmp53.Type = TType.String;
          tmp53.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
          await oprot.WriteStringAsync(Text, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Loc != null) && __isset.loc)
        {
          tmp53.Name = "loc";
          tmp53.Type = TType.Struct;
          tmp53.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
          await Loc.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.tweetType)
        {
          tmp53.Name = "tweetType";
          tmp53.Type = TType.I32;
          tmp53.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
          await oprot.WriteI32Async((int)TweetType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Language != null) && __isset.language)
        {
          tmp53.Name = "language";
          tmp53.Type = TType.String;
          tmp53.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp53, cancellationToken);
          await oprot.WriteStringAsync(Language, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Tweet other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.profile == other.__isset.profile) && ((!__isset.profile) || (global::System.Object.Equals(Profile, other.Profile))))
        && ((__isset.text == other.__isset.text) && ((!__isset.text) || (global::System.Object.Equals(Text, other.Text))))
        && ((__isset.loc == other.__isset.loc) && ((!__isset.loc) || (global::System.Object.Equals(Loc, other.Loc))))
        && ((__isset.tweetType == other.__isset.tweetType) && ((!__isset.tweetType) || (global::System.Object.Equals(TweetType, other.TweetType))))
        && ((__isset.language == other.__isset.language) && ((!__isset.language) || (global::System.Object.Equals(Language, other.Language))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Profile != null) && __isset.profile)
        {
          hashcode = (hashcode * 397) + Profile.GetHashCode();
        }
        if((Text != null) && __isset.text)
        {
          hashcode = (hashcode * 397) + Text.GetHashCode();
        }
        if((Loc != null) && __isset.loc)
        {
          hashcode = (hashcode * 397) + Loc.GetHashCode();
        }
        if(__isset.tweetType)
        {
          hashcode = (hashcode * 397) + TweetType.GetHashCode();
        }
        if((Language != null) && __isset.language)
        {
          hashcode = (hashcode * 397) + Language.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp54 = new StringBuilder("Tweet(");
      int tmp55 = 0;
      if((Profile != null) && __isset.profile)
      {
        if(0 < tmp55++) { tmp54.Append(", "); }
        tmp54.Append("Profile: ");
        Profile.ToString(tmp54);
      }
      if((Text != null) && __isset.text)
      {
        if(0 < tmp55++) { tmp54.Append(", "); }
        tmp54.Append("Text: ");
        Text.ToString(tmp54);
      }
      if((Loc != null) && __isset.loc)
      {
        if(0 < tmp55++) { tmp54.Append(", "); }
        tmp54.Append("Loc: ");
        Loc.ToString(tmp54);
      }
      if(__isset.tweetType)
      {
        if(0 < tmp55++) { tmp54.Append(", "); }
        tmp54.Append("TweetType: ");
        TweetType.ToString(tmp54);
      }
      if((Language != null) && __isset.language)
      {
        if(0 < tmp55++) { tmp54.Append(", "); }
        tmp54.Append("Language: ");
        Language.ToString(tmp54);
      }
      tmp54.Append(')');
      return tmp54.ToString();
    }
  }

}
