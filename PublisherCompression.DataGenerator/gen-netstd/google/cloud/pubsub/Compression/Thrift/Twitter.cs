/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Google.Cloud.PubSub.Compression.Thrift
{

  public partial class Twitter : TBase
  {
    private List<global::Google.Cloud.PubSub.Compression.Thrift.Space> _spaces;

    public List<global::Google.Cloud.PubSub.Compression.Thrift.Space> Spaces
    {
      get
      {
        return _spaces;
      }
      set
      {
        __isset.spaces = true;
        this._spaces = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool spaces;
    }

    public Twitter()
    {
    }

    public Twitter DeepCopy()
    {
      var tmp95 = new Twitter();
      if((Spaces != null) && __isset.spaces)
      {
        tmp95.Spaces = this.Spaces.DeepCopy();
      }
      tmp95.__isset.spaces = this.__isset.spaces;
      return tmp95;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list96 = await iprot.ReadListBeginAsync(cancellationToken);
                  Spaces = new List<global::Google.Cloud.PubSub.Compression.Thrift.Space>(_list96.Count);
                  for(int _i97 = 0; _i97 < _list96.Count; ++_i97)
                  {
                    global::Google.Cloud.PubSub.Compression.Thrift.Space _elem98;
                    _elem98 = new global::Google.Cloud.PubSub.Compression.Thrift.Space();
                    await _elem98.ReadAsync(iprot, cancellationToken);
                    Spaces.Add(_elem98);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp99 = new TStruct("Twitter");
        await oprot.WriteStructBeginAsync(tmp99, cancellationToken);
        var tmp100 = new TField();
        if((Spaces != null) && __isset.spaces)
        {
          tmp100.Name = "spaces";
          tmp100.Type = TType.List;
          tmp100.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp100, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Spaces.Count), cancellationToken);
          foreach (global::Google.Cloud.PubSub.Compression.Thrift.Space _iter101 in Spaces)
          {
            await _iter101.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Twitter other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.spaces == other.__isset.spaces) && ((!__isset.spaces) || (TCollections.Equals(Spaces, other.Spaces))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Spaces != null) && __isset.spaces)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Spaces);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp102 = new StringBuilder("Twitter(");
      int tmp103 = 0;
      if((Spaces != null) && __isset.spaces)
      {
        if(0 < tmp103++) { tmp102.Append(", "); }
        tmp102.Append("Spaces: ");
        Spaces.ToString(tmp102);
      }
      tmp102.Append(')');
      return tmp102.ToString();
    }
  }

}
