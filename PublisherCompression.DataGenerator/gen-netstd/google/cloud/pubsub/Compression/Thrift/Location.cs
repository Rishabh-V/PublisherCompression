/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Google.Cloud.PubSub.Compression.Thrift
{

  public partial class Location : TBase
  {
    private double _latitude;
    private double _longitude;

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool latitude;
      public bool longitude;
    }

    public Location()
    {
    }

    public Location DeepCopy()
    {
      var tmp0 = new Location();
      if(__isset.latitude)
      {
        tmp0.Latitude = this.Latitude;
      }
      tmp0.__isset.latitude = this.__isset.latitude;
      if(__isset.longitude)
      {
        tmp0.Longitude = this.Longitude;
      }
      tmp0.__isset.longitude = this.__isset.longitude;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Double)
              {
                Latitude = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Double)
              {
                Longitude = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1 = new TStruct("Location");
        await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
        var tmp2 = new TField();
        if(__isset.latitude)
        {
          tmp2.Name = "latitude";
          tmp2.Type = TType.Double;
          tmp2.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteDoubleAsync(Latitude, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.longitude)
        {
          tmp2.Name = "longitude";
          tmp2.Type = TType.Double;
          tmp2.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteDoubleAsync(Longitude, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Location other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.latitude == other.__isset.latitude) && ((!__isset.latitude) || (global::System.Object.Equals(Latitude, other.Latitude))))
        && ((__isset.longitude == other.__isset.longitude) && ((!__isset.longitude) || (global::System.Object.Equals(Longitude, other.Longitude))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.latitude)
        {
          hashcode = (hashcode * 397) + Latitude.GetHashCode();
        }
        if(__isset.longitude)
        {
          hashcode = (hashcode * 397) + Longitude.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp3 = new StringBuilder("Location(");
      int tmp4 = 0;
      if(__isset.latitude)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Latitude: ");
        Latitude.ToString(tmp3);
      }
      if(__isset.longitude)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Longitude: ");
        Longitude.ToString(tmp3);
      }
      tmp3.Append(')');
      return tmp3.ToString();
    }
  }

}
