/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Google.Cloud.PubSub.Compression.Thrift
{

  public partial class Address : TBase
  {
    private string _street;
    private string _apartment;
    private string _city;
    private string _state;
    private string _country;
    private int _zipCode;
    private global::Google.Cloud.PubSub.Compression.Thrift.Location _location;

    public string Street
    {
      get
      {
        return _street;
      }
      set
      {
        __isset.street = true;
        this._street = value;
      }
    }

    public string Apartment
    {
      get
      {
        return _apartment;
      }
      set
      {
        __isset.apartment = true;
        this._apartment = value;
      }
    }

    public string City
    {
      get
      {
        return _city;
      }
      set
      {
        __isset.city = true;
        this._city = value;
      }
    }

    public string State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public int ZipCode
    {
      get
      {
        return _zipCode;
      }
      set
      {
        __isset.zipCode = true;
        this._zipCode = value;
      }
    }

    public global::Google.Cloud.PubSub.Compression.Thrift.Location Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool street;
      public bool apartment;
      public bool city;
      public bool state;
      public bool country;
      public bool zipCode;
      public bool location;
    }

    public Address()
    {
    }

    public Address DeepCopy()
    {
      var tmp5 = new Address();
      if((Street != null) && __isset.street)
      {
        tmp5.Street = this.Street;
      }
      tmp5.__isset.street = this.__isset.street;
      if((Apartment != null) && __isset.apartment)
      {
        tmp5.Apartment = this.Apartment;
      }
      tmp5.__isset.apartment = this.__isset.apartment;
      if((City != null) && __isset.city)
      {
        tmp5.City = this.City;
      }
      tmp5.__isset.city = this.__isset.city;
      if((State != null) && __isset.state)
      {
        tmp5.State = this.State;
      }
      tmp5.__isset.state = this.__isset.state;
      if((Country != null) && __isset.country)
      {
        tmp5.Country = this.Country;
      }
      tmp5.__isset.country = this.__isset.country;
      if(__isset.zipCode)
      {
        tmp5.ZipCode = this.ZipCode;
      }
      tmp5.__isset.zipCode = this.__isset.zipCode;
      if((Location != null) && __isset.location)
      {
        tmp5.Location = (global::Google.Cloud.PubSub.Compression.Thrift.Location)this.Location.DeepCopy();
      }
      tmp5.__isset.location = this.__isset.location;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Street = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Apartment = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                City = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                State = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Country = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                ZipCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.Struct)
              {
                Location = new global::Google.Cloud.PubSub.Compression.Thrift.Location();
                await Location.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp6 = new TStruct("Address");
        await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
        var tmp7 = new TField();
        if((Street != null) && __isset.street)
        {
          tmp7.Name = "street";
          tmp7.Type = TType.String;
          tmp7.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(Street, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Apartment != null) && __isset.apartment)
        {
          tmp7.Name = "apartment";
          tmp7.Type = TType.String;
          tmp7.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(Apartment, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((City != null) && __isset.city)
        {
          tmp7.Name = "city";
          tmp7.Type = TType.String;
          tmp7.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(City, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((State != null) && __isset.state)
        {
          tmp7.Name = "state";
          tmp7.Type = TType.String;
          tmp7.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(State, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Country != null) && __isset.country)
        {
          tmp7.Name = "country";
          tmp7.Type = TType.String;
          tmp7.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(Country, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.zipCode)
        {
          tmp7.Name = "zipCode";
          tmp7.Type = TType.I32;
          tmp7.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteI32Async(ZipCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Location != null) && __isset.location)
        {
          tmp7.Name = "location";
          tmp7.Type = TType.Struct;
          tmp7.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await Location.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is Address other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.street == other.__isset.street) && ((!__isset.street) || (global::System.Object.Equals(Street, other.Street))))
        && ((__isset.apartment == other.__isset.apartment) && ((!__isset.apartment) || (global::System.Object.Equals(Apartment, other.Apartment))))
        && ((__isset.city == other.__isset.city) && ((!__isset.city) || (global::System.Object.Equals(City, other.City))))
        && ((__isset.state == other.__isset.state) && ((!__isset.state) || (global::System.Object.Equals(State, other.State))))
        && ((__isset.country == other.__isset.country) && ((!__isset.country) || (global::System.Object.Equals(Country, other.Country))))
        && ((__isset.zipCode == other.__isset.zipCode) && ((!__isset.zipCode) || (global::System.Object.Equals(ZipCode, other.ZipCode))))
        && ((__isset.location == other.__isset.location) && ((!__isset.location) || (global::System.Object.Equals(Location, other.Location))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Street != null) && __isset.street)
        {
          hashcode = (hashcode * 397) + Street.GetHashCode();
        }
        if((Apartment != null) && __isset.apartment)
        {
          hashcode = (hashcode * 397) + Apartment.GetHashCode();
        }
        if((City != null) && __isset.city)
        {
          hashcode = (hashcode * 397) + City.GetHashCode();
        }
        if((State != null) && __isset.state)
        {
          hashcode = (hashcode * 397) + State.GetHashCode();
        }
        if((Country != null) && __isset.country)
        {
          hashcode = (hashcode * 397) + Country.GetHashCode();
        }
        if(__isset.zipCode)
        {
          hashcode = (hashcode * 397) + ZipCode.GetHashCode();
        }
        if((Location != null) && __isset.location)
        {
          hashcode = (hashcode * 397) + Location.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp8 = new StringBuilder("Address(");
      int tmp9 = 0;
      if((Street != null) && __isset.street)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Street: ");
        Street.ToString(tmp8);
      }
      if((Apartment != null) && __isset.apartment)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Apartment: ");
        Apartment.ToString(tmp8);
      }
      if((City != null) && __isset.city)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("City: ");
        City.ToString(tmp8);
      }
      if((State != null) && __isset.state)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("State: ");
        State.ToString(tmp8);
      }
      if((Country != null) && __isset.country)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Country: ");
        Country.ToString(tmp8);
      }
      if(__isset.zipCode)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("ZipCode: ");
        ZipCode.ToString(tmp8);
      }
      if((Location != null) && __isset.location)
      {
        if(0 < tmp9++) { tmp8.Append(", "); }
        tmp8.Append("Location: ");
        Location.ToString(tmp8);
      }
      tmp8.Append(')');
      return tmp8.ToString();
    }
  }

}
